#include <stdio.h>
#include <stdlib.h>
#include <iostream>

#include <GL/glut.h>

#define N 16
#define WINDOW_WIDTH 800
#define WINDOW_HEIGHT 600

#define START_X 300
#define START_Y 300

#define MAX_SPEED 10

#define REFRESH_DELAY 10


struct Data
{
    float* x;
    float* y;
    float* vx;
    float* vy;
    Data()
    {
        x = new float[N];
        y = new float[N];
        vx = new float[N];
        vy = new float[N];

        for(int i = 0; i < N; i++)
        {
            x[i] = -WINDOW_WIDTH + (rand() % (2 * WINDOW_WIDTH));
            y[i] = -WINDOW_HEIGHT + (rand() % (2 * WINDOW_HEIGHT));
            vx[i] = ((float)rand() / (float)INT_MAX) * MAX_SPEED;
            vy[i] = ((float)rand() / (float)INT_MAX) * MAX_SPEED;
        }
    }

    ~Data()
    {
        delete[] x;
        delete[] y;
        delete[] vx;
        delete[] vy;
    }
};


Data *data;


void displayMe(void)
{

    float test[] = {0.0f, 0.0f, 0.0f, 0.5f, 0.0f, 0.0f, 0.0f, 0.5f, 0.0f,};
    

    // glClear(GL_COLOR_BUFFER_BIT);
    // for(int i = 0; i < N; i++)
    // {
    //     std::cout << "Drawing triangle " << i << " " << data->x[i] << ":" << data->y[i] << std::endl;
    //     glBegin(GL_TRIANGLES);
    //         glVertex2f(data->x[i] / WINDOW_WIDTH, data->y[i] / WINDOW_HEIGHT);
    //         glVertex2f(data->x[i] / WINDOW_WIDTH + 0.05, data->y[i] / WINDOW_HEIGHT + 0.05);
    //         glVertex2f(data->x[i] / WINDOW_WIDTH + 0.05, data->y[i] / WINDOW_HEIGHT - 0.05);
    //     glEnd();
    // }
    // glFlush();

}

void timerEvent(int value)
{
    if (glutGetWindow())
    {
        glutPostRedisplay();
        glutTimerFunc(REFRESH_DELAY, timerEvent,0);
    }
}

int main(int argc, char** argv)
{
    srand(time(NULL));

    // Preload GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE);
    glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
    glutInitWindowPosition(START_X, START_Y);
    glutCreateWindow("Fish simulation");
    glutDisplayFunc(displayMe);

    glutTimerFunc(REFRESH_DELAY, timerEvent,0);
    // init fishes
    data = new Data();
    
    glutMainLoop();
    return 0;
}